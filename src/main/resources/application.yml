spring:
##        로컬 테스트용 h2 DB 설정..
    datasource:
        url: jdbc:h2:tcp://localhost/~/mummoomH2
        username: sa
        password:
        driver-class-name: org.h2.Driver
    ### oauth 연습용 db 설정
#    datasource:
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/oauth_login_tutorial?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
#        username: root
#        password: root
#        hikari:
#            pool-name: jpa-hikari-pool
#            maximum-pool-size: 5
#            jdbc-url: ${spring.datasource.url}
#            username: ${spring.datasource.username}
#            password: ${spring.datasource.password}
#            driver-class-name: ${spring.datasource.driver-class-name}
#            data-source-properties:
#                rewriteBatchedStatements: true
#    jpa:
#        generate-ddl: true
#        hibernate:
#            ddl-auto: update
#        show-sql: true
#        properties:
#            hibernate:
#                dialect: org.hibernate.dialect.MySQL8Dialect
#                hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
#                current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
#                default_batch_fetch_size: ${chunkSize:100}
#                jdbc.batch_size: 20
#                order_inserts: true
#                order_updates: true
#                format_sql: true
    mvc:
        pathmatch:
            matching-strategy: ant_path_matcher
    jpa:
        generate-ddl : true
        hibernate:
            ddl-auto: create
        properties:
            hibernate:
            show_sql: true
            format_sql: true
            dialect: org.hibernate.dialect.MySQL5Dialect
    h2:
        console:
            enabled: true
    security:
        oauth2:
            client:
                registration:
                    google:
                        clientId: '{구글 client-id}'
                        clientSecret: '{구글 client-secret}'
                        scope:
                            - email
                            - profile
                    kakao:
                        clientId: '{카카오 client-id}'
                        clientSecret: '{카카오 client-secret}'
                        clientAuthenticationMethod: post
                        authorizationGrantType: authorization_code
                        redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                        scope:
                            - profile_nickname
                            - profile_image
                            - account_email
                        clientName: Kakao
                provider:
                    kakao:
                        authorizationUri: https://kauth.kakao.com/oauth/authorize
                        tokenUri: https://kauth.kakao.com/oauth/token
                        userInfoUri: https://kapi.kakao.com/v2/user/me
                        userNameAttribute: id
    # cors 설정
    cors:
        allowed-origins: 'http://localhost:8080'
        allowed-methods: GET,POST,PUT,DELETE,OPTIONS
        allowed-headers: '*'
        max-age: 3600
    # jwt secret key 설정
    jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'

    # 토큰 관련 secret Key 및 RedirectUri 설정
    app:
        auth:
            tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
            tokenExpiry: 1800000
            refreshTokenExpiry: 604800000
        oauth2:
            authorizedRedirectUris:
                - http://localhost:3000/oauth/redirect
#    server:
#        servlet:
#            context-path: /api

#logging.level:
#    org.hibernate.SQL: debug
#    org.hibernate.type: trace

# http://localhost:8080/swagger-ui.html
